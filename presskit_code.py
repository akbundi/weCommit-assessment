# -*- coding: utf-8 -*-
"""Untitled81.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ugz_eqj7wX4twfxXy_KAns9disBLPyOt
"""

pip install pdfkit pymupdf

import os
import torch
import fitz  # PyMuPDF for PDF generation
import requests
from bs4 import BeautifulSoup
from transformers import pipeline, AutoModelForCausalLM, AutoTokenizer, AutoModelForSequenceClassification
import torch.nn.functional as F

# Use environment variable for security
HUGGINGFACE_API_KEY = "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"
os.environ["HUGGINGFACE_API_KEY"] = HUGGINGFACE_API_KEY
hf_api_key = os.getenv("HUGGINGFACE_API_KEY")

def collect_user_input(existing_data=None):
    """Collects user input for press kit generation with modification option."""
    data = existing_data or {}
    prompts = {
        "company_name": "Enter Company Name",
        "flagship_product": "Enter Flagship Product/Service",
        "major_achievements": "List Major Achievements",
        "brand_attributes": "Describe Brand Attributes",
        "press_topic": "Enter Press Release Topic",
        "target_media": "Enter Target Media Info",
        "tone": "Choose Tone (Formal, Professional, Creative)"
    }

    for key, prompt in prompts.items():
        data[key] = input(f"{prompt} [{data.get(key, '')}]: ") or data.get(key, "")

    return data

def fetch_supplementary_data(company_name):
    """Fetch latest news & trends related to the company using Google News."""
    try:
        search_url = f"https://gnews.io/api/v4/search?q={company_name}&token=a52e456c40ad2e2e51aa85e71d780394"
        response = requests.get(search_url, timeout=5)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        headlines = [h.text for h in soup.find_all("a")[:5]]
        return "\n".join(headlines) if headlines else "No recent news found."
    except requests.exceptions.RequestException:
        return "Could not fetch news."

def generate_press_kit(data, supplementary_data):
    """Uses Hugging Face model to generate press kit content."""
    model_name = "bigscience/bloom-560m"
    tokenizer = AutoTokenizer.from_pretrained(model_name, token=hf_api_key)
    model = AutoModelForCausalLM.from_pretrained(model_name, token=hf_api_key, torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32)
    generator = pipeline("text-generation", model=model, tokenizer=tokenizer)

    prompt = f"""
    Create a professional press release for {data['company_name']}.
    Include:
    - Company Overview
    - Flagship Product: {data['flagship_product']}
    - Achievements: {data['major_achievements']}
    - Brand Attributes: {data['brand_attributes']}
    - Target Media: {data['target_media']}
    - Press Release Topic: {data['press_topic']}
    - Tone: {data['tone']}
    - Supplementary Info: {supplementary_data}
    """
    response = generator(prompt, max_length=1000, do_sample=True, truncation=True)
    return response[0]['generated_text']

def generate_pdf(content, review_report, filename="press_kit.pdf"):
    """Generates a well-formatted PDF including the press kit and quality review report."""
    doc = fitz.open()
    page = doc.new_page()

    # Define initial position
    text_y = 50

    # Insert the Press Kit title
    page.insert_text((50, text_y), "Press Kit", fontsize=16, fontname="helv")  # Corrected font name
    text_y += 40  # Space after the title

    # Insert press kit content
    for line in content.split("\n"):
        page.insert_text((50, text_y), line, fontsize=12, fontname="helv")
        text_y += 20  # Adjust spacing dynamically

    # Insert quality review title
    text_y += 40
    page.insert_text((50, text_y), "Quality Review Report", fontsize=14, fontname="helv")
    text_y += 30

    # Insert quality review content
    for line in review_report.split("\n"):
        page.insert_text((50, text_y), line, fontsize=12, fontname="helv")
        text_y += 20  # Adjust spacing dynamically

    # Save the PDF
    doc.save(filename)
    print(f"Press Kit saved as {filename}")


def review_quality(content):
    """AI-based quality review for press kit content using Hugging Face models."""
    summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
    content_summary = summarizer(content[:1024], max_length=150, min_length=50, do_sample=False)[0]["summary_text"]

    model_name = "cross-encoder/ms-marco-MiniLM-L-6-v2"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSequenceClassification.from_pretrained(model_name)

    evaluation_prompts = {
        "Content Consistency": "Rate the consistency and coherence of this press release:",
        "Writing Style and Tone": "Rate the writing style and tone of this press release:",
        "Layout and Structure": "Rate the structure and organization of this press release:",
        "SEO Optimization": "Rate the SEO optimization of this press release:"
    }

    scores = {}
    for criterion, prompt in evaluation_prompts.items():
        inputs = tokenizer(prompt + " " + content, return_tensors="pt", padding=True, truncation=True, max_length=512)
        with torch.no_grad():
            logits = model(**inputs).logits
        score = F.softmax(logits, dim=-1).numpy().flatten()
        predicted_score = round(float(score[-1]) * 10, 1) if score.size > 1 else round(float(score[0]) * 10, 1)
        scores[criterion] = predicted_score

    quality_review = f"""
    [Quality Review Report]
    1. Content Consistency: {scores['Content Consistency']}/10
    2. Writing Style and Tone: {scores['Writing Style and Tone']}/10
    3. Layout and Structure: {scores['Layout and Structure']}/10
    4. SEO Optimization: {scores['SEO Optimization']}/10

    Overall Feedback: The press kit is well-structured and informative.
    Summary: {content_summary}
    """
    print(quality_review)
    return quality_review

def main():
    user_data = collect_user_input()
    while True:
        supplementary_data = fetch_supplementary_data(user_data['company_name'])
        print("Supplementary Data:", supplementary_data)

        content = generate_press_kit(user_data, supplementary_data)
        print("Generated Press Kit:\n", content)

        feedback = review_quality(content)
        print("AI Review Feedback:\n", feedback)

        confirmation = input("\nDo you confirm this final configuration? (Y/N/Edit): ").strip().upper()
        if confirmation == 'Y':
            generate_pdf(content, feedback)
            print("Press Kit finalized and saved. Exiting...")
            break
        elif confirmation in ['N', 'EDIT']:
            print("Editing previous input values...")
            user_data = collect_user_input(user_data)
        else:
            print("Invalid input. Restarting process...\n")

if __name__ == "__main__":
    main()